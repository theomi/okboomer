swagger: "2.0"
info:
  description: "this is a useless website but let us have fun during our bachelor pls"
  version: "1.0.0"
  title: "OkBoomer"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "okboomer.ch"
basePath: "/v1"
tags:
- name: "quote"
- name: "user"
schemes:
- "https"
- "http"
paths:
  /quotes:
    get:
      tags:
      - "quote"
      summary: "returns quotes' list"
      operationId: "getQuotes"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Quote"
        "404":
          description: "quotes not found"
    post:
      tags:
      - "quote"
      summary: "Add a new quote"
      operationId: "addQuote"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "qutoe object that needs to be added to the list"
        required: true
        schema:
          $ref: "#/definitions/Quote"
      responses:
        "405":
          description: "Invalid input"
  /quotes/{quoteId}:
    patch:
      tags:
      - "quote"
      summary: "Update an existing quote"
      operationId: "updateQuoteById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "quoteId"
        in: "path"
        description: "ID of quote to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "quote object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Quote"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "quote not found"
        "405":
          description: "Validation exception"
    get:
      tags:
      - "quote"
      summary: "Find quote by ID"
      description: "Returns a single pet"
      operationId: "getQuoteById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "quoteId"
        in: "path"
        description: "ID of quote to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Quote"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "quote not found"
    delete:
      tags:
      - "quote"
      summary: "Deletes a quote"
      operationId: "deleteQuoteById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "quoteId"
        in: "path"
        description: "quote id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "quote not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user"
        in: "body"
        description: "The user name for login"
        schema: 
          $ref: "#/definitions/CreateUser"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetUser"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    patch:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/UpdateUser"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  Quote:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      authorId:
        type: "integer"
        format: "int64"
      name: 
        type: "string"
      date: 
        type: "string"
      content: 
        type: "string"
  CreateUser:
      required:
        - username
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
  GetUser:
    required:
      - id
      - username
      - firstName
      - lastName
      - email
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
  UpdateUser:
    type: object
    properties:
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string